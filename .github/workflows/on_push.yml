name: build and test

on: [push]

env:
  CONTAINER_REGISTRY: docker.anders.fi
  CONTAINER_REGISTRY_REPO: docker.anders.fi/devops/azure-kolga-demo
  CONTAINER_REGISTRY_USER: azure-registry-user
  CONTAINER_REGISTRY_PASSWORD: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
  PROJECT_NAME: ${{ github.repository }}
  DOCKER_IMAGE_NAME: ci-configuration
  BUILD_HOST_IMAGE: docker.anders.fi/devops/azure-kolga-demo:master-development


jobs:
  on_push:
    runs-on: ubuntu-18.04
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: login to Docker container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ env.CONTAINER_REGISTRY_USER }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: pull Kólga Docker image
        run: docker pull $BUILD_HOST_IMAGE

      - name: use Kólga to build Kólga
        id: build
        run: |
          /usr/bin/docker run --name dockerandersfidevopsazurekolgademomasterdevelopment_2ae0b8 --label 3b3ac6 --workdir /github/workspace --rm -e CONTAINER_REGISTRY -e CONTAINER_REGISTRY_REPO -e CONTAINER_REGISTRY_USER -e CONTAINER_REGISTRY_PASSWORD -e DOCKER_IMAGE_NAME -e HOME -e GITHUB_JOB -e GITHUB_REF -e GITHUB_SHA -e GITHUB_REPOSITORY -e GITHUB_REPOSITORY_OWNER -e GITHUB_RUN_ID -e GITHUB_RUN_NUMBER -e GITHUB_ACTOR -e GITHUB_WORKFLOW -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e GITHUB_EVENT_NAME -e GITHUB_SERVER_URL -e GITHUB_API_URL -e GITHUB_GRAPHQL_URL -e GITHUB_WORKSPACE -e GITHUB_ACTION -e GITHUB_EVENT_PATH -e RUNNER_OS -e RUNNER_TOOL_CACHE -e RUNNER_TEMP -e RUNNER_WORKSPACE -e ACTIONS_RUNTIME_URL -e ACTIONS_RUNTIME_TOKEN -e ACTIONS_CACHE_URL -e GITHUB_ACTIONS=true -e CI=true -v "/var/run/docker.sock":"/var/run/docker.sock" -v "/home/runner/work/_temp/_github_home":"/github/home" -v "/home/runner/work/_temp/_github_workflow":"/github/workflow" -v "/home/runner/work/ci-configuration/ci-configuration":"/github/workspace" docker.anders.fi/devops/azure-kolga-demo:master-development  "bash" "-c" "echo $GITHUB_REPOSITORY && cat /app/kolga/settings.py && ./devops create_images"
#      - name: use Kólga to build Kólga
#        id: build
#        run: |
#          /usr/bin/docker run --name dockerandersfidevopsazurekolgademomasterdevelopment_2ae0b8 --label 3b3ac6 --workdir /github/workspace --rm -e CONTAINER_REGISTRY -e CONTAINER_REGISTRY_REPO -e CONTAINER_REGISTRY_USER -e CONTAINER_REGISTRY_PASSWORD -e DOCKER_IMAGE_NAME -e HOME -e GITHUB_JOB -e GITHUB_REF -e GITHUB_SHA -e GITHUB_REPOSITORY -e GITHUB_REPOSITORY_OWNER -e GITHUB_RUN_ID -e GITHUB_RUN_NUMBER -e GITHUB_ACTOR -e GITHUB_WORKFLOW -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e GITHUB_EVENT_NAME -e GITHUB_SERVER_URL -e GITHUB_API_URL -e GITHUB_GRAPHQL_URL -e GITHUB_WORKSPACE -e GITHUB_ACTION -e GITHUB_EVENT_PATH -e RUNNER_OS -e RUNNER_TOOL_CACHE -e RUNNER_TEMP -e RUNNER_WORKSPACE -e ACTIONS_RUNTIME_URL -e ACTIONS_RUNTIME_TOKEN -e ACTIONS_CACHE_URL -e GITHUB_ACTIONS=true -e CI=true -v "/var/run/docker.sock":"/var/run/docker.sock" -v "/home/runner/work/_temp/_github_home":"/github/home" -v "/home/runner/work/_temp/_github_workflow":"/github/workflow" -v "/home/runner/work/ci-configuration/ci-configuration":"/github/workspace" docker.anders.fi/devops/azure-kolga-demo:master-development  "bash" "-c" "echo $GITHUB_REPOSITORY && cat /app/kolga/settings.py && ./devops create_images
#          env > ./.docker-env
#          docker run --env-file .docker-env $BUILD_HOST_IMAGE /bin/bash -c "./devops create_images"
#          export BUILT_IMAGE=$(./devops docker_test_image)
#          echo "::set-env name=BUILT_DOCKER_TEST_IMAGE::$BUILT_IMAGE"'

      - name: style tests
        run: docker run $BUILT_DOCKER_TEST_IMAGE /bin/bash -c "make style-tests"
        if: ${{ steps.build.outcome == 'success' && always() }}

      - name: typing tests
        run: docker run $BUILT_DOCKER_TEST_IMAGE /bin/bash -c "make typing-tests"
        if: ${{ steps.build.outcome == 'success' && always() }}

      - name: package tests
        run: docker run $BUILT_DOCKER_TEST_IMAGE /bin/bash -c "make package-tests"
        if: ${{ steps.build.outcome == 'success' && always() }}

      - name: doc tests
        run: docker run $BUILT_DOCKER_TEST_IMAGE /bin/bash -c "make docs"
        if: ${{ steps.build.outcome == 'success' && always() }}

      - name: functional tests
        run: |
          sudo chown $(whoami) /etc/hosts && echo 127.0.0.1 docker-registry >> /etc/hosts
          make test
        if: ${{ steps.build.outcome == 'success' && always() }}